pragma nexscript ^1.0.2;

/**
 * @title Smart Parking Rental Smart Contract
 * @dev This contract facilitates decentralized rental of private parking spots.
 * It allows parking spot owners to register their spaces, and users to reserve them for specific time periods.
 * Payments and penalties are managed automatically through blockchain transactions.
 */

contract ParkingRental(
    pubkey platformOwnerPk,  // Public key of the platform owner
    int platformFeePercent   // Percentage fee taken by the platform
) {
    // Function to make a reservation for a parking spot
    function makeReservation(
        pubkey ownerPk,
        pubkey renterPk,
        int startTime,
        int endTime,
        int depositPaid,
        int pricePerHour,
        sig renterSig
    ) {
        // Verify the renter's signature
        require(checkSig(renterSig, renterPk));

        // Calculate rental cost and platform fee
        int rentalCost = pricePerHour * (endTime - startTime) / 3600;  // Assuming time in seconds
        int platformFee = rentalCost * platformFeePercent / 100;

        // Ensure the renter has paid at least the deposit and cost
        require(depositPaid >= rentalCost + depositPaid);  // Adjusted to use depositPaid correctly

        // Platform fee logic
        int payoutToOwner = rentalCost - platformFee;
        require(tx.outputs[0].value == payoutToOwner);
        require(tx.outputs[1].value == platformFee);
        require(tx.outputs[0].lockingBytecode == new LockingBytecodeP2PKT(hash160(ownerPk)));
        require(tx.outputs[1].lockingBytecode == new LockingBytecodeP2PKT(hash160(platformOwnerPk)));
    }

    // Function to end a reservation and handle payments and penalties
    function endReservation(
        pubkey renterPk,
        pubkey ownerPk,
        int depositPaid,
        int penaltyAmount,
        sig renterSig,
        sig ownerSig
    ) {
        // Verify signatures
        require(checkSig(renterSig, renterPk));
        require(checkSig(ownerSig, ownerPk));

        // Handle penalties and refunds
        int refundAmount = depositPaid - penaltyAmount;
        require(refundAmount >= 0);

        // Simplified logic to handle payment after penalties
        require(tx.outputs[0].value == penaltyAmount);
        require(tx.outputs[1].value == refundAmount);
        require(tx.outputs[0].lockingBytecode == new LockingBytecodeP2PKT(hash160(ownerPk)));
        require(tx.outputs[1].lockingBytecode == new LockingBytecodeP2PKT(hash160(renterPk)));
    }
}
